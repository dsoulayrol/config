# Command formats for gpg
#
# This version uses gpg-2comp from http://70t.de/download/gpg-2comp.tar.gz
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# decode application/pgp
set pgp_decode_command = "gpg %?p?--passphrase-fd 0? --no-verbose --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command = "gpg --no-verbose --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command = "gpg --passphrase-fd 0 --no-verbose --batch --output - %f"

# create a pgp/mime signed attachment
set pgp_sign_command = "gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
set pgp_clearsign_command = "gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
#set pgp_encrypt_only_command = "pgpewrap gpg --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust --encrypt-to *UNSET* -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
#set pgp_encrypt_sign_command = "pgpewrap gpg --passphrase-fd 0 --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust --encrypt-to *UNSET* -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command = "gpg --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command = "gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command = "gpg --no-verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command = "gpg --no-verbose --batch --with-colons --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command = "gpg --no-verbose --batch --with-colons --list-secret-keys %r"

# fetch keys
# This will work when #172960 will be fixed upstream
# set pgp_getkeys_command = "gpg --recv-keys %r"

# specify the uid to use when encrypting/signing.
# should be overriden in accounts.
#  set pgp_sign_as =

# this set the number of seconds to keep in memory the passpharse used to encrypt/sign
# the more the less secure it will be
set pgp_timeout = 60

# it's a regexp used against the GPG output: if it matches some line of the output
# then mutt considers the message a good signed one (ignoring the GPG exit code)
set pgp_good_sign = "^gpg: Good signature from"

# automatically sign all outcoming messages
set crypt_autosign = no

# sign only replies to signed messages
set crypt_replysign

# do not automatically encrypt outcoming messages
set crypt_autoencrypt = no

# encrypt only replies to signed messages
set crypt_replyencrypt = yes

# encrypt and sign replies to encrypted messages
set crypt_replysignencrypted = yes

# automatically verify the sign of a message when opened
set crypt_verify_sig = yes

